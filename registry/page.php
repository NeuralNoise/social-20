<?php

class Page
{
    //Page title
    private $title = '';

    //Template tags
    private $tags = array();

    //Tags to be processed after the page has been parsed
    private $postParseTags = array();

    //Template Bits
    private $bits = array();

    //Page content
    private $content = "";

    //Additional Parsing Data
    private $apd = array();

    //Registry
    private $registry;

    //require('registry.php');

    public function __construct(Registry $registry)
    {
        $this->registry = $registry;
    }

    //Set Page Title
    public function setTitle($title)
    {
        $this->title = $title;
    }

    //Get Page Title
    public function getTitle()
    {
        return $this->title;
    }

    //Set Page content
    public function setContent($content)
    {
        $this->content = $content;
    }

    /**
     * Add a template tag, and its replacement value/data to the page
     * @param String $key the key to store within the tags array
     * @param String $data the replacement data (may also be an array)
     * @return void
     */
    public function addTag($key, $data)
    {
        $this->tags[$key] = $data;
        //echo $key.'=>'.$data.'<br />';
    }

    public function removeTag($key)
    {
        unset($this->tags[$key]);
    }

    //Get the tags
    public function getTags()
    {
        return $this->tags;
    }

    //Add post parse tags
    public function addPPTag($key, $data)
    {
        $this->postParseTags[$key] = $data;
    }

    //Get post parse tags
    public function getPPTags()
    {
        $this->postParseTags;
    }

    //Add template bit (not the content)
    public function addTemplateBit($tag, $bit, $rep = array())
    {
        $this->bits[$tag] = array('template' => $bit, 'replacements' => $rep);
    }

    /**
     * Adds additional parsing data
     * A.P.D is used in parsing loops. We may want to have an extra bit of data depending on on iterations value
     * for example on a form list, we may want a specific item to be "selected"
     * @param String block the condition applies to
     * @param String tag within the block the condition applies to
     * @param String condition : what the tag must equal
     * @param String extratag : if the tag value = condition then we have an extra tag called extratag
     * @param String data : if the tag value = condition then extra tag is replaced with this value
     */
    public function addAdditionalParsingData($block, $tag, $condition, $extratag, $data)
    {
        $this->apd[$block] = array($tag => array('condition' => $condition, 'tag' => $extratag, 'data' => $data));  //Array of array of array
    }

    //Get bits
    public function getBits()
    {
        return $this->bits;
    }

    //Get APD
    public function getAdditionalParsingData()
    {
        return $this->apd;
    }

    //Get the chunk of page content from the tag wrapping the block (<!--START tag --> block <!--END tag -->)
    public function getBlock($tag)
    {
        preg_match('#<!-- START ' . $tag . ' -->(.+?)<!-- END ' . $tag . ' -->#si', $this->content, $tor);
        if (!empty($tor)) {
            $tor = str_replace('<!-- START ' . $tag . ' -->', "", $tor[0]);
            $tor = str_replace('<!-- END ' . $tag . ' -->', "", $tor);
        } else {
            $tor = '';
        }
        return $tor;
    }

    public function getContent()
    {
        return $this->content;
    }

    public function getContentToPrint()
    {
        $this->content = preg_replace('#{form_(.+?)}#si', '', $this->content);
        $this->content = preg_replace('#{nbd_(.+?)}#si', '', $this->content);
        //$this->content = str_replace('</body>', '<!-- Generated by our Fantastic Social Network --></body>', $this->content );
        return $this->content;
    }
}

?>